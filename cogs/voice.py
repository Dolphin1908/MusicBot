import discord # Import th∆∞ vi·ªán discord
from discord.ext import commands # Import th∆∞ vi·ªán commands t·ª´ discord.ext
import yt_dlp as youtube_dl # Import yt_dlp ƒë·ªÉ t·∫£i th√¥ng tin video t·ª´ Youtube
import asyncio # Import asyncio ƒë·ªÉ s·ª≠ d·ª•ng coroutine
from collections import deque # Import deque ƒë·ªÉ s·ª≠ d·ª•ng h√†ng ƒë·ª£i
from utils.supporter import format_duration # Import h√†m format_duration t·ª´ file supporter.py

# C√†i ƒë·∫∑t cho youtube_dl
YDL_OPTS = {
    'format': 'bestaudio/best', # Ch·ªçn format audio t·ªët nh·∫•t
    'postprocessors': [{ # Ch·ªçn postprocessor ƒë·ªÉ x·ª≠ l√Ω audio
        'key': 'FFmpegExtractAudio', # Ch·ªçn FFmpeg ƒë·ªÉ extract audio
        'preferredcodec': 'mp3', # Ch·ªçn codec mp3
        'preferredquality': '192', # Ch·ªçn ch·∫•t l∆∞·ª£ng 192kbps
    }],
    'noplaylist': True, # Kh√¥ng ph√°t danh s√°ch ph√°t
    'quiet': True # Kh√¥ng hi·ªÉn th·ªã log
}

# C√†i ƒë·∫∑t cho ffmpeg
FFMPEG_OPTS = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', # Reconnect khi b·ªã disconnect
    'options': '-vn' # Ch·ªâ l·∫•y audio
}

SEARCH_OPTS = {
        'format': 'bestaudio/best', 
        'noplaylist': True,
        'quiet': True,
        'extract_flat': False,  # Kh√¥ng t·∫£i xu·ªëng video, ch·ªâ l·∫•y th√¥ng tin
        'default_search': 'ytsearch',  # T√¨m ki·∫øm tr√™n YouTube
    }

class VoiceCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot # L∆∞u l·∫°i bot ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c h√†m kh√°c
        self.music_queue = deque() # H√†ng ƒë·ª£i nh·∫°c
        self.current_song = None # B√†i h√°t ƒëang ph√°t
        self.voice_check_task = self.bot.loop.create_task(self.check_voice_state()) # Task ki·ªÉm tra voice state

    @commands.command(name="join",
                      description="Tham gia voice channel",
                      usage="!join")
    async def join(self, ctx):
        if ctx.author.voice:
            channel = ctx.author.voice.channel
            await channel.connect()
        else:
            await ctx.send("B·∫°n ƒëang kh√¥ng ·ªü trong voice channel n√†o.")
    
    @commands.command(name="leave",
                      description="R·ªùi kh·ªèi voice channel",
                      usage="!leave")
    async def leave(self, ctx):
        if ctx.voice_client:
            await ctx.voice_client.disconnect()
        else:
            await ctx.send("Bot kh√¥ng ·ªü trong voice channel n√†o.")

    @commands.command(name="play",
                      aliases=["p"],
                      description="Ph√°t nh·∫°c t·ª´ Youtube",
                      usage="!play <url>")
    async def play(self, ctx, *, query: str, from_queue=False):
        if not ctx.voice_client:
            await ctx.invoke(self.join) # G·ªçi l·ªánh join n·∫øu bot ch∆∞a ·ªü trong voice channel
        
        voice_client = ctx.voice_client # L·∫•y voice client

        if not from_queue: # N·∫øu kh√¥ng ph·∫£i t·ª´ h√†ng ƒë·ª£i th√¨ t√¨m ki·∫øm b√†i h√°t
            is_url = query.startswith("http") # Ki·ªÉm tra xem query c√≥ ph·∫£i l√† url kh√¥ng
            if not is_url: # N·∫øu kh√¥ng ph·∫£i url th√¨ t√¨m ki·∫øm tr√™n Youtube
                try:
                    with youtube_dl.YoutubeDL(SEARCH_OPTS) as ydl:
                        info = ydl.extract_info(f"ytsearch5:{query}", download=False)
                        if not info or 'entries' not in info:
                            await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o.")
                            return

                        results = info['entries'][:5]
                        search_results = [
                            f"{i+1}. **{entry.get('title', 'Kh√¥ng x√°c ƒë·ªãnh')}** - `{format_duration(entry.get('duration', 'Kh√¥ng x√°c ƒë·ªãnh'))}`"
                            for i, entry in enumerate(results)
                        ]

                        message = await ctx.send(
                            "üîé **K·∫øt qu·∫£ t√¨m ki·∫øm:**\n" + "\n".join(search_results) + 
                            "\n\nüìå **Nh·∫•n v√†o s·ªë (1-5) ho·∫∑c nh·∫≠p s·ªë ƒë·ªÉ ch·ªçn b√†i h√°t.**"
                        )

                        emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]
                        for emoji in emojis:
                            await message.add_reaction(emoji)

                        def check(reaction, user):
                            return user == ctx.author and str(reaction.emoji) in emojis and reaction.message.id == message.id

                        try:
                            reaction, _ = await self.bot.wait_for("reaction_add", timeout=20.0, check=check)
                            choice = emojis.index(str(reaction.emoji))  # Chuy·ªÉn emoji th√†nh index
                        except asyncio.TimeoutError:
                            await ctx.send("‚è≥ H·∫øt th·ªùi gian ch·ªçn b√†i h√°t.")
                            return

                        selected_song = results[choice]
                        url = selected_song['url']  # C·∫≠p nh·∫≠t query th√†nh URL b√†i h√°t ƒë√£ ch·ªçn
                        title = selected_song.get('title', 'Kh√¥ng x√°c ƒë·ªãnh')
                        duration = format_duration(selected_song.get('duration', 'Kh√¥ng x√°c ƒë·ªãnh'))

                except youtube_dl.utils.DownloadError as e:
                    await ctx.send("‚ùå L·ªói khi t√¨m ki·∫øm b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i.")
                    print(f"L·ªói khi t√¨m ki·∫øm b√†i h√°t: {e}")
                    return
                #try:
                #    with youtube_dl.YoutubeDL(SEARCH_OPTS) as ydl: # S·ª≠ d·ª•ng youtube_dl ƒë·ªÉ t√¨m ki·∫øm tr√™n Youtube
                #        info = ydl.extract_info(query, download=False) # L·∫•y th√¥ng tin video
                #        if 'entries' in info: # Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ t√¨m ki·∫øm kh√¥ng
                #            url2 = info['entries'][0]['url']  # L·∫•y url c·ªßa video
                #            title = info['entries'][0].get('title', 'Kh√¥ng x√°c ƒë·ªãnh') # L·∫•y title c·ªßa video
                #            duration = format_duration(info['entries'][0].get('duration', 'Kh√¥ng x√°c ƒë·ªãnh')) # L·∫•y duration c·ªßa video
                #        else: # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ t√¨m ki·∫øm
                #            await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o.")
                #            return
                #except youtube_dl.utils.DownloadError as e: # B·∫Øt l·ªói n·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin video
                #    await ctx.send("‚ùå L·ªói kh√¥ng t√¨m th·∫•y th√¥ng tin b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i.")
                #    print(f"L·ªói kh√¥ng t√¨m th·∫•y th√¥ng tin b√†i h√°t: {e}")
                #    return

            else: # N·∫øu l√† url th√¨ l·∫•y th√¥ng tin video
                try:
                    with youtube_dl.YoutubeDL(YDL_OPTS) as ydl: # S·ª≠ d·ª•ng youtube_dl ƒë·ªÉ l·∫•y th√¥ng tin video
                        info = ydl.extract_info(query, download=False) # L·∫•y th√¥ng tin video
                        url = info['url'] # L·∫•y url c·ªßa video
                        title = info.get('title', 'Kh√¥ng x√°c ƒë·ªãnh') # L·∫•y title c·ªßa video
                        duration = format_duration(info.get('duration', 'Kh√¥ng x√°c ƒë·ªãnh')) # L·∫•y duration c·ªßa video
                except youtube_dl.utils.DownloadError as e: # B·∫Øt l·ªói n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin video
                    await ctx.send("‚ùå L·ªói khi l·∫•y th√¥ng tin b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i.")
                    print(f"L·ªói khi l·∫•y th√¥ng tin b√†i h√°t: {e}")
                    return

            song_info = {
                "url": url,  # URL stream
                "title": title, # Ti√™u ƒë·ªÅ
                "duration": duration # Th·ªùi l∆∞·ª£ng
            }
            # N·∫øu ƒëang ph√°t nh·∫°c th√¨ th√™m v√†o h√†ng ƒë·ª£i
            if voice_client.is_playing():
                await ctx.send(f"‚ûï ƒê√£ th√™m **{title}** - `{duration}` v√†o h√†ng ƒë·ª£i!")
                self.music_queue.append(song_info)
                return

        else: # N·∫øu t·ª´ h√†ng ƒë·ª£i th√¨ l·∫•y th√¥ng tin t·ª´ query
            url = query['url'] # L·∫•y url t·ª´ query
            title = query.get('title', 'Kh√¥ng x√°c ƒë·ªãnh') # L·∫•y title t·ª´ query
            duration = query.get('duration', 'Kh√¥ng x√°c ƒë·ªãnh') # L·∫•y duration t·ª´ query

        # Chuy·ªÉn ƒë·ªïi url th√†nh source ƒë·ªÉ ph√°t nh·∫°c
        source = discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(url, **FFMPEG_OPTS), volume=0.5)

        ''' H√†m sau s·∫Ω ƒë∆∞·ª£c g·ªçi khi b√†i h√°t k·∫øt th√∫c '''
        def after_play(error):
            if error: # Ki·ªÉm tra l·ªói
                print(f"L·ªói ph√°t nh·∫°c: {error}")
            # Ki·ªÉm tra v√† g·ªçi ph√°t b√†i ti·∫øp theo
            future = asyncio.run_coroutine_threadsafe(self.play_next(ctx), self.bot.loop)
            try:
                future.result()  # ƒê·ªÉ b·∫Øt l·ªói n·∫øu c√≥
            except Exception as e:
                print(f"L·ªói khi g·ªçi play_next: {e}")

        # Ph√°t nh·∫°c
        voice_client.play(source, after=after_play)

        # G·ª≠i th√¥ng b√°o
        await ctx.send(f"üéµ ƒêang ph√°t: **{title}** - `{duration}`")

    async def play_next(self, ctx):
        """Ph√°t b√†i ti·∫øp theo trong h√†ng ƒë·ª£i"""
        if self.music_queue:
            next_song = self.music_queue.popleft() # L·∫•y b√†i h√°t ƒë·∫ßu ti√™n trong h√†ng ƒë·ª£i
            await ctx.invoke(self.play, query=next_song, from_queue=True) # G·ªçi l·ªánh play ƒë·ªÉ ph√°t b√†i h√°t
        else:
            await asyncio.sleep(300)  # Ch·ªù 30 gi√¢y tr∆∞·ªõc khi r·ªùi k√™nh
            if ctx.voice_client and not ctx.voice_client.is_playing(): # Ki·ªÉm tra xem c√≥ ƒëang ph√°t nh·∫°c kh√¥ng
                await ctx.voice_client.disconnect() # R·ªùi k√™nh voice
                await ctx.send("üîá Kh√¥ng c√≤n nh·∫°c, bot r·ªùi k√™nh voice.")

    @commands.command(name="queue", 
                      aliases=["q"], 
                      description="Hi·ªÉn th·ªã danh s√°ch nh·∫°c ƒëang ch·ªù", 
                      usage="!queue")
    async def queue(self, ctx):
        """Hi·ªÉn th·ªã danh s√°ch nh·∫°c ƒëang ch·ªù"""
        if not self.music_queue:
            await ctx.send("üì≠ H√†ng ƒë·ª£i tr·ªëng.")
        else:
            queue_list = "\n".join(f"{i+1}. {url}" for i, url in enumerate(self.music_queue))
            await ctx.send(f"üìú **Danh s√°ch ph√°t:**\n{queue_list}")

    @commands.command(name="pause",
                      description="T·∫°m d·ª´ng ph√°t nh·∫°c",
                      usage="!pause")
    async def pause(self, ctx):
        if ctx.voice_client.is_playing():
            ctx.voice_client.pause()
            await ctx.send("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng.")
        else:
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.")
    
    @commands.command(name="resume",
                      description="Ti·∫øp t·ª•c ph√°t nh·∫°c",
                      usage="!resume")
    async def resume(self, ctx):
        if ctx.voice_client.is_paused():
            ctx.voice_client.resume()
            await ctx.send("‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t.")
        else:
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang t·∫°m d·ª´ng.")

    @commands.command(name="stop",
                      description="D·ª´ng ph√°t nh·∫°c",
                      usage="!stop")
    async def stop(self, ctx):
        if ctx.voice_client.is_playing():
            ctx.voice_client.stop()
            await ctx.send("‚èπÔ∏è ƒê√£ d·ª´ng ph√°t.")
        else:
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.")

    @commands.command(name="skip",
                      description="B·ªè qua b√†i h√°t hi·ªán t·∫°i",
                      usage="!skip")
    async def skip(self, ctx):
        if ctx.voice_client.is_playing():
            ctx.voice_client.stop() # D·ª´ng b√†i h√°t hi·ªán t·∫°i
            ctx.voice_client.resume() # Ti·∫øp t·ª•c ph√°t b√†i ti·∫øp theo
            await ctx.send("‚è≠Ô∏è ƒê√£ b·ªè qua b√†i h√°t.")
        else:
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t")

    @commands.command(name="clearqueue",
                      aliases=["clearq"],
                      description="X√≥a h·∫øt h√†ng ƒë·ª£i",
                      usage="!clearqueue")
    async def clear_queue(self, ctx):
        self.music_queue.clear()
        await ctx.send("üóëÔ∏è ƒê√£ x√≥a h·∫øt h√†ng ƒë·ª£i.")

    @commands.command(name="nowplaying",
                      aliases=["np"],
                      description="Hi·ªÉn th·ªã b√†i h√°t ƒëang ph√°t",
                      usage="!nowplaying")
    async def now_playing(self, ctx):
        if ctx.voice_client.is_playing():
            title = self.current_song.get('title', 'Kh√¥ng x√°c ƒë·ªãnh')
            duration = format_duration(self.current_song.get('duration', 'Kh√¥ng x√°c ƒë·ªãnh'))
            await ctx.send(f"üéµ **{title}** - `{duration}`")
        else:
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.")

    @commands.command(name="volume",
                      description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng",
                      usage="!volume <s·ªë>")
    async def volume(self, ctx, volume: int):
        if ctx.voice_client:
            ctx.voice_client.source.volume = volume / 100
            await ctx.send(f"üîä ƒê√£ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng th√†nh {volume}%")
        else:
            await ctx.send("Bot kh√¥ng ·ªü trong voice channel n√†o.")
    
    async def check_voice_state(self):
        """Ki·ªÉm tra bot c√≥ b·ªã disconnect kh√¥ng v√† k·∫øt n·ªëi l·∫°i n·∫øu c·∫ßn"""
        while True:
            await asyncio.sleep(300)  # C·ª© 30s ki·ªÉm tra m·ªôt l·∫ßn
            for vc in self.bot.voice_clients:
                if not vc.is_playing() and not vc.is_paused() and not self.music_queue:
                    await vc.disconnect()

async def setup(bot):
    await bot.add_cog(VoiceCog(bot)) # Th√™m cog v√†o bot